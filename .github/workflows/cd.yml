name: CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and Package Services
      run: |
        cd payment-service && mvn clean package -DskipTests
        cd ../order-service && mvn clean package -DskipTests
        cd ../notification-service && mvn clean package -DskipTests
        cd ../product-service && mvn clean package -DskipTests
        cd ..
        
    - name: Build Docker Images
      run: |
        docker-compose build
        
    - name: Tag Docker Images
      run: |
        docker tag ecomerce_payment-service:latest payment-service:${{ github.sha }}
        docker tag ecomerce_order-service:latest order-service:${{ github.sha }}
        docker tag ecomerce_notification-service:latest notification-service:${{ github.sha }}
        docker tag ecomerce_product-service:latest product-service:${{ github.sha }}
        
    - name: Save Docker Images
      run: |
        docker save payment-service:${{ github.sha }} | gzip > payment-service.tar.gz
        docker save order-service:${{ github.sha }} | gzip > order-service.tar.gz
        docker save notification-service:${{ github.sha }} | gzip > notification-service.tar.gz
        docker save product-service:${{ github.sha }} | gzip > product-service.tar.gz
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          *.tar.gz
          docker-compose.yml
          monitoring/
        retention-days: 30
        
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Aqui vocÃª adicionaria os comandos para deploy real
        # Por exemplo: kubectl apply -f k8s/ ou docker-compose up -d
        
    - name: Run Smoke Tests
      run: |
        echo "Running smoke tests..."
        # Adicionar testes de smoke aqui 