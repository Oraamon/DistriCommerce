version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: ecommerce-backend
    ports:
      - "${BACKEND_PORT:-8091}:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-sa}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-password}
      - SPRING_DEVTOOLS_RESTART_ENABLED=true
      - SPRING_DEVTOOLS_LIVERELOAD_ENABLED=true
    networks:
      - ecommerce-network
    volumes:
      - ./src:/app/src
      - ./build.gradle:/app/build.gradle
      - ./settings.gradle:/app/settings.gradle
      - gradle-cache:/root/.gradle
    healthcheck:
      test: ["CMD", "ls", "/app/gradlew"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ecommerce-frontend-1
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
      - REACT_APP_BACKEND_URL=http://gateway-service:8090
    depends_on:
      - gateway-service
    networks:
      - ecommerce-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    stdin_open: true
    tty: true

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: ecommerce_product,ecommerce_order,ecommerce_payment
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mongodb:
    image: mongo:5.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=ecommerce
    volumes:
      - mongodb-data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ecommerce-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - "8090:8080"
    depends_on:
      - eureka-server
    networks:
      - ecommerce-network

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - mongodb
    networks:
      - ecommerce-network

  order-service:
    container_name: order-service
    build:
      context: .
      dockerfile: order-service/Dockerfile
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./order-service/src:/workspace/app/order-service/src
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  payment-service:
    container_name: payment-service
    build:
      context: .
      dockerfile: payment-service/Dockerfile
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./payment-service/src:/workspace/app/payment-service/src
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  user-service:
    build: ./user-service
    ports:
      - "8084:8084"
    depends_on:
      - eureka-server
      - postgres
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ecommerce_user
    networks:
      - ecommerce-network

  recommendation-service:
    build: ./recommendation_service
    ports:
      - "50051:50051"
      - "5001:5001"
    environment:
      - EUREKA_SERVER=http://eureka-server:8761/eureka
      - MONGO_URI=mongodb://mongodb:27017
      - MONGO_DB=ecommerce
    depends_on:
      - eureka-server
      - mongodb
    networks:
      - ecommerce-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ecommerce-network

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - ecommerce-network

volumes:
  postgres-data:
  mongodb-data:
  prometheus-data:
  grafana-data:
  gradle-cache:
  node_modules:

networks:
  ecommerce-network:
    driver: bridge 